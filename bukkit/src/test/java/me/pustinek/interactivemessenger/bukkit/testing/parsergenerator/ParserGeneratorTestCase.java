package me.pustinek.interactivemessenger.bukkit.testing.parsergenerator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonSyntaxException;
import junit.framework.TestCase;
import me.pustinek.interactivemessenger.common.Log;
import me.pustinek.interactivemessenger.common.message.InteractiveMessage;

import me.pustinek.interactivemessenger.bukkit.generators.ConsoleGenerator;
import me.pustinek.interactivemessenger.bukkit.generators.TellrawGenerator;
import me.pustinek.interactivemessenger.bukkit.parsers.YamlParser;
import me.pustinek.interactivemessenger.bukkit.testing.RunTests;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.exception.ExceptionUtils;

import java.io.File;
import java.io.IOException;
import java.util.List;

public class ParserGeneratorTestCase extends TestCase {

	private File file;
	private static final Gson gson = new GsonBuilder().setPrettyPrinting().setLenient().create();

	public ParserGeneratorTestCase(File file) {
		super();
		// Cleanup .txt from the name
		String name = file.getName();
		if(name.endsWith(".txt") && name.length() > 4) {
			name = name.substring(0, name.length()-4);
		}
		setName(name);
		this.file = file;
	}

	@Override
	protected void runTest() {
		Log.info("\n");
		Log.info("┌───────────────────────────────────────────────────────────────────────────────");
		Log.info("│ Test:", RunTests.getName(file));
		Log.info("└───────────────────────────────────────────────────────────────────────────────");


		ParserGeneratorTestInput data;
		try {
			data = ParserGeneratorTestInput.from(file);
		} catch(IOException e) {
			error("Failed to read file: "+ExceptionUtils.getStackTrace(e));
			return;
		}

		// Check if the input is defined (don't check output to make it easy to add tests, assertEquals will fail anyway)
		if(data.input.isEmpty()) {
			error("Input is not defined");
			return;
		}

		Log.info("  Input:");
		Log.infoIndent(2, data.input);
		Log.info("  Expected ConsoleGenerator output:");
		Log.infoIndent(2, data.expectedConsoleOutput);
		Log.info("  Expected TellrawGenerator output:");
		Log.infoIndent(2, data.expectedTellrawOutput);

		// Parse into InteractiveMessage
		InteractiveMessage parsedMessage = YamlParser.parse(data.input);
		Log.info("  Parsed InteractiveMessage:", parsedMessage);

		// Generate result of ConsoleGenerator
		String actualConsoleOutput = ConsoleGenerator.generate(parsedMessage);
		Log.info("  Generated by ConsoleGenerator:");
		Log.infoIndent(2, actualConsoleOutput);

		// Generate result of TellrawGenerator
		List<String> actualTellrawOutputList = TellrawGenerator.generate(parsedMessage);
		String actualTellrawOutputString = "["+StringUtils.join(actualTellrawOutputList, ",")+"]";

		// Parse actual output into Json
		JsonElement actualTellrawOutputJson;
		try {
			actualTellrawOutputJson = gson.fromJson(actualTellrawOutputString, JsonElement.class);
		} catch(JsonSyntaxException e) {
			error("Generated Json output is invalid:", actualTellrawOutputString, "\n\n"+ExceptionUtils.getStackTrace(e));
			return;
		}
		Log.info("  Generated by TellrawGenerator:");
		Log.infoIndent(2, gson.toJson(actualTellrawOutputJson));

		// Parse expected output into Json
		JsonElement expectedTellrawOutputJson;
		try {
			expectedTellrawOutputJson = gson.fromJson(data.expectedTellrawOutput, JsonElement.class);
		} catch(JsonSyntaxException e) {
			error("Expected output is invalid Json:", ExceptionUtils.getStackTrace(e));
			return;
		}

		// Test if equal
		assertEquals(data.expectedConsoleOutput, actualConsoleOutput);
		assertEquals(gson.toJson(expectedTellrawOutputJson), gson.toJson(actualTellrawOutputJson));
	}

	/**
	 * Fail the test and print the error message
	 * @param parts The message parts
	 */
	private void error(Object... parts) {
		Log.error(parts);
		fail(StringUtils.join(parts, " "));
	}

}
